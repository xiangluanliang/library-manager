<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guo.mapper.BookInventoryMapper">
  <resultMap id="BaseResultMap" type="com.guo.domain.BookInventory">
    <id column="inventory_id" jdbcType="INTEGER" property="inventoryId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="total_copies" jdbcType="INTEGER" property="totalCopies" />
    <result column="available_copies" jdbcType="INTEGER" property="availableCopies" />
    <result column="location" jdbcType="VARCHAR" property="location" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    inventory_id, book_id, total_copies, available_copies, location
  </sql>
  <select id="selectByExample" parameterType="com.guo.domain.BookInventoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from book_inventory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <!-- 根据图书ID删除库存记录 -->
  <delete id="deleteByBookId" parameterType="int">
    DELETE FROM book_inventory
    WHERE book_id = #{bookId}
  </delete>
  <select id="selectByBookId" parameterType="int" resultType="com.guo.domain.BookInventory">
    SELECT *
    FROM book_inventory
    WHERE book_id = #{bookId}
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from book_inventory
    where inventory_id = #{inventoryId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book_inventory
    where inventory_id = #{inventoryId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guo.domain.BookInventoryExample">
    delete from book_inventory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guo.domain.BookInventory" useGeneratedKeys="true">
    <selectKey keyProperty="inventoryId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into book_inventory (book_id, total_copies, available_copies, 
      location)
    values (#{bookId,jdbcType=INTEGER}, #{totalCopies,jdbcType=INTEGER}, #{availableCopies,jdbcType=INTEGER}, 
      #{location,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.guo.domain.BookInventory" useGeneratedKeys="true">
    <selectKey keyProperty="inventoryId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into book_inventory
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        book_id,
      </if>
      <if test="totalCopies != null">
        total_copies,
      </if>
      <if test="availableCopies != null">
        available_copies,
      </if>
      <if test="location != null">
        location,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="totalCopies != null">
        #{totalCopies,jdbcType=INTEGER},
      </if>
      <if test="availableCopies != null">
        #{availableCopies,jdbcType=INTEGER},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guo.domain.BookInventoryExample" resultType="java.lang.Long">
    select count(*) from book_inventory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update book_inventory
    <set>
      <if test="record.inventoryId != null">
        inventory_id = #{record.inventoryId,jdbcType=INTEGER},
      </if>
      <if test="record.bookId != null">
        book_id = #{record.bookId,jdbcType=INTEGER},
      </if>
      <if test="record.totalCopies != null">
        total_copies = #{record.totalCopies,jdbcType=INTEGER},
      </if>
      <if test="record.availableCopies != null">
        available_copies = #{record.availableCopies,jdbcType=INTEGER},
      </if>
      <if test="record.location != null">
        location = #{record.location,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update book_inventory
    set inventory_id = #{record.inventoryId,jdbcType=INTEGER},
      book_id = #{record.bookId,jdbcType=INTEGER},
      total_copies = #{record.totalCopies,jdbcType=INTEGER},
      available_copies = #{record.availableCopies,jdbcType=INTEGER},
      location = #{record.location,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guo.domain.BookInventory">
    update book_inventory
    <set>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="totalCopies != null">
        total_copies = #{totalCopies,jdbcType=INTEGER},
      </if>
      <if test="availableCopies != null">
        available_copies = #{availableCopies,jdbcType=INTEGER},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
    </set>
    where inventory_id = #{inventoryId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guo.domain.BookInventory">
    update book_inventory
    set book_id = #{bookId,jdbcType=INTEGER},
      total_copies = #{totalCopies,jdbcType=INTEGER},
      available_copies = #{availableCopies,jdbcType=INTEGER},
      location = #{location,jdbcType=VARCHAR}
    where inventory_id = #{inventoryId,jdbcType=INTEGER}
  </update>
  <update id="updateByBookIdSelective" parameterType="com.guo.domain.BookInventory">
    update book_inventory
    <set>
      <if test="totalCopies != null">
        total_copies = #{totalCopies,jdbcType=INTEGER},
      </if>
      <if test="availableCopies != null">
        available_copies = #{availableCopies,jdbcType=INTEGER},
      </if>
      <if test="location != null">
        location = #{location,jdbcType=VARCHAR},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="incrementAvailableCopies" parameterType="int">
    UPDATE book_inventory
    SET
      available_copies = available_copies + 1
    WHERE
      book_id = #{bookId}
  </update>
</mapper>