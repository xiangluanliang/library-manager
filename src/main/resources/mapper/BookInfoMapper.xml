<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guo.mapper.BookInfoMapper">
  <resultMap id="BaseResultMap" type="com.guo.domain.BookInfo">
    <id column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="isbn" jdbcType="VARCHAR" property="isbn" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="publisher" jdbcType="VARCHAR" property="publisher" />
    <result column="publish_date" jdbcType="DATE" property="publishDate" />
    <result column="cover_url" jdbcType="VARCHAR" property="coverUrl" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="price" jdbcType="DECIMAL" property="price" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.guo.domain.BookInfo">
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    book_id, isbn, title, author, publisher, publish_date, cover_url, category_id, price
  </sql>
  <sql id="Blob_Column_List">
    description
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.guo.domain.BookInfoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.guo.domain.BookInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from book_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <resultMap id="BookInfoVoResultMap" type="com.guo.domain.Vo.BookInfoVo" extends="BaseResultMap">
    <result column="available_copies" jdbcType="INTEGER" property="availableCopies" />
    <result column="total_copies" jdbcType="INTEGER" property="totalCopies" />
</resultMap>

  <select id="searchAdvanced" resultMap="BookInfoVoResultMap">
    SELECT
    bi.*,
    inv.available_copies,
    inv.total_copies
    FROM
    book_info bi
    LEFT JOIN
    book_inventory inv ON bi.book_id = inv.book_id
    <where>
      <if test="keyword != null and keyword != ''">
        <choose>
          <when test="field == 'author'">
            bi.author LIKE #{keyword}
          </when>
          <when test="field == 'isbn'">
            bi.isbn LIKE #{keyword}
          </when>
          <when test="field == 'publisher'">
            bi.publisher LIKE #{keyword}
          </when>
          <otherwise>
            bi.title LIKE #{keyword}
          </otherwise>
        </choose>
      </if>
    </where>
    ORDER BY bi.book_id DESC
    LIMIT #{offset}, #{pageSize}
  </select>
  <select id="countByCategoryId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM book_info WHERE category_id = #{categoryId}
  </select>
  <select id="countAdvanced" resultType="int">
    SELECT
    COUNT(*)
    FROM
    book_info bi

    <where>
      <if test="keyword != null and keyword != ''">
        <choose>
          <when test="field == 'author'">
            bi.author LIKE #{keyword}
          </when>
          <when test="field == 'isbn'">
            bi.isbn LIKE #{keyword}
          </when>
          <when test="field == 'publisher'">
            bi.publisher LIKE #{keyword}
          </when>
          <otherwise>
            bi.title LIKE #{keyword}
          </otherwise>
        </choose>
      </if>
    </where>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_info
    where book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <select id="selectVoByPrimaryKey" parameterType="java.lang.Integer" resultMap="BookInfoVoResultMap">
    SELECT
      bi.*,
      inv.available_copies,
      inv.total_copies
    FROM
      book_info bi
        LEFT JOIN
      book_inventory inv ON bi.book_id = inv.book_id
    WHERE
      bi.book_id = #{bookId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book_info
    where book_id = #{bookId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guo.domain.BookInfoExample">
    delete from book_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guo.domain.BookInfo">
    <selectKey keyProperty="bookId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into book_info (isbn, title, author, 
      publisher, publish_date, cover_url, 
      category_id, price, description
      )
    values (#{isbn,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{publisher,jdbcType=VARCHAR}, #{publishDate,jdbcType=DATE}, #{coverUrl,jdbcType=VARCHAR}, 
      #{categoryId,jdbcType=INTEGER}, #{price,jdbcType=DECIMAL}, #{description,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.guo.domain.BookInfo">
    <selectKey keyProperty="bookId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into book_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="isbn != null">
        isbn,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="publisher != null">
        publisher,
      </if>
      <if test="publishDate != null">
        publish_date,
      </if>
      <if test="coverUrl != null">
        cover_url,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="description != null">
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="isbn != null">
        #{isbn,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null">
        #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="publishDate != null">
        #{publishDate,jdbcType=DATE},
      </if>
      <if test="coverUrl != null">
        #{coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guo.domain.BookInfoExample" resultType="java.lang.Long">
    select count(*) from book_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update book_info
    <set>
      <if test="record.bookId != null">
        book_id = #{record.bookId,jdbcType=INTEGER},
      </if>
      <if test="record.isbn != null">
        isbn = #{record.isbn,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.publisher != null">
        publisher = #{record.publisher,jdbcType=VARCHAR},
      </if>
      <if test="record.publishDate != null">
        publish_date = #{record.publishDate,jdbcType=DATE},
      </if>
      <if test="record.coverUrl != null">
        cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update book_info
    set book_id = #{record.bookId,jdbcType=INTEGER},
      isbn = #{record.isbn,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      publisher = #{record.publisher,jdbcType=VARCHAR},
      publish_date = #{record.publishDate,jdbcType=DATE},
      cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      description = #{record.description,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update book_info
    set book_id = #{record.bookId,jdbcType=INTEGER},
      isbn = #{record.isbn,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      author = #{record.author,jdbcType=VARCHAR},
      publisher = #{record.publisher,jdbcType=VARCHAR},
      publish_date = #{record.publishDate,jdbcType=DATE},
      cover_url = #{record.coverUrl,jdbcType=VARCHAR},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guo.domain.BookInfo">
    update book_info
    <set>
      <if test="isbn != null">
        isbn = #{isbn,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="publisher != null">
        publisher = #{publisher,jdbcType=VARCHAR},
      </if>
      <if test="publishDate != null">
        publish_date = #{publishDate,jdbcType=DATE},
      </if>
      <if test="coverUrl != null">
        cover_url = #{coverUrl,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.guo.domain.BookInfo">
    update book_info
    set isbn = #{isbn,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      publisher = #{publisher,jdbcType=VARCHAR},
      publish_date = #{publishDate,jdbcType=DATE},
      cover_url = #{coverUrl,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      description = #{description,jdbcType=LONGVARCHAR}
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guo.domain.BookInfo">
    update book_info
    set isbn = #{isbn,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      publisher = #{publisher,jdbcType=VARCHAR},
      publish_date = #{publishDate,jdbcType=DATE},
      cover_url = #{coverUrl,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL}
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
</mapper>