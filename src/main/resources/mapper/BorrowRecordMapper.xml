<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guo.mapper.BorrowRecordMapper">
  <resultMap id="BaseResultMap" type="com.guo.domain.BorrowRecord">
    <id column="borrow_id" jdbcType="INTEGER" property="borrowId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="borrow_time" jdbcType="TIMESTAMP" property="borrowTime" />
    <result column="due_time" jdbcType="TIMESTAMP" property="dueTime" />
    <result column="status" jdbcType="CHAR" property="status" />
  </resultMap>
    <!-- 其他已有的配置... -->

    <!-- 定义新的 ResultMap -->
  <resultMap id="BorrowRecordVoResultMap" type="com.guo.domain.Vo.BorrowRecordVo">
    <id column="borrow_id" jdbcType="INTEGER" property="borrowId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="borrow_time" jdbcType="TIMESTAMP" property="borrowTime" />
    <result column="due_time" jdbcType="TIMESTAMP" property="dueTime" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="title" jdbcType="VARCHAR" property="bookTitle" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    borrow_id, user_id, book_id, borrow_time, due_time, status
  </sql>
  <select id="selectByExample" parameterType="com.guo.domain.BorrowRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from borrow_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <!-- 分页查询所有借阅记录并包含用户和图书详细信息 -->
  <select id="selectAllWithDetailsByPage" parameterType="map" resultMap="BorrowRecordVoResultMap">
    SELECT
      br.borrow_id,
      br.user_id,
      br.book_id,
      br.borrow_time,
      br.due_time,
      br.status,
      u.user_name,
      bi.title
    FROM
      borrow_record br
        LEFT JOIN
      user u ON br.user_id = u.user_id
        LEFT JOIN
      book_info bi ON br.book_id = bi.book_id
      LIMIT #{offset}, #{pageSize}
  </select>

  <!-- 根据用户ID查询借阅记录并包含用户和图书详细信息 -->
  <select id="findWithDetailsByUserId" parameterType="int" resultMap="BorrowRecordVoResultMap">
    SELECT
      br.borrow_id,
      br.user_id,
      br.book_id,
      br.borrow_time,
      br.due_time,
      br.status,
      u.user_name,
      bi.title
    FROM
      borrow_record br
        LEFT JOIN
      user u ON br.user_id = u.user_id
        LEFT JOIN
      book_info bi ON br.book_id = bi.book_id
    WHERE
      br.user_id = #{userId}
  </select>

  <!-- 统计所有借阅记录数量 -->
  <select id="countAll" resultType="java.lang.Long">
    SELECT COUNT(*) FROM borrow_record
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrow_record
    where borrow_id = #{borrowId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from borrow_record
    where borrow_id = #{borrowId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guo.domain.BorrowRecordExample">
    delete from borrow_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guo.domain.BorrowRecord">
    <selectKey keyProperty="borrowId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into borrow_record (user_id, book_id, borrow_time, 
      due_time, status)
    values (#{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, #{borrowTime,jdbcType=TIMESTAMP}, 
      #{dueTime,jdbcType=TIMESTAMP}, #{status,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.guo.domain.BorrowRecord">
    <selectKey keyProperty="borrowId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into borrow_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="borrowTime != null">
        borrow_time,
      </if>
      <if test="dueTime != null">
        due_time,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="borrowTime != null">
        #{borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dueTime != null">
        #{dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guo.domain.BorrowRecordExample" resultType="java.lang.Long">
    select count(*) from borrow_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update borrow_record
    <set>
      <if test="record.borrowId != null">
        borrow_id = #{record.borrowId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.bookId != null">
        book_id = #{record.bookId,jdbcType=INTEGER},
      </if>
      <if test="record.borrowTime != null">
        borrow_time = #{record.borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dueTime != null">
        due_time = #{record.dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update borrow_record
    set borrow_id = #{record.borrowId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      book_id = #{record.bookId,jdbcType=INTEGER},
      borrow_time = #{record.borrowTime,jdbcType=TIMESTAMP},
      due_time = #{record.dueTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guo.domain.BorrowRecord">
    update borrow_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        book_id = #{bookId,jdbcType=INTEGER},
      </if>
      <if test="borrowTime != null">
        borrow_time = #{borrowTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dueTime != null">
        due_time = #{dueTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
    </set>
    where borrow_id = #{borrowId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guo.domain.BorrowRecord">
    update borrow_record
    set user_id = #{userId,jdbcType=INTEGER},
      book_id = #{bookId,jdbcType=INTEGER},
      borrow_time = #{borrowTime,jdbcType=TIMESTAMP},
      due_time = #{dueTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR}
    where borrow_id = #{borrowId,jdbcType=INTEGER}
  </update>
</mapper>